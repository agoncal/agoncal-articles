Christmas is coming! Like every year, Santa needs to schedule its presents delivery. Can you imagine? Millions of (good) children will receive a present on the night of the 24th of December. To achieve this prowess, Santa needs a bit of technical help to schedule the deliveries. What about a microservice architecture with MicroProfile and Quarkus?
<h3>Resilient Microservice Architecture</h3>
Santa has been using several technical architecture in the past, but now, he wants to move to microservices! He has already found external partners to work with, so he wants us to develop a resilient architecture to interact with these third-party microservices.

So we need to develop Santa its own microservice (called <em>Santa</em>), with its own database, to schedule his coming deliveries. With this microservice, Santa can find his past deliveries per country, but more important, he can create the new schedule for Christmas 2020. For that, Santa accesses (JSON over HTTP) two external microservices developed and maintained by external partners:
<ul>
 	<li><em>Kid</em>: Third-party microservice that gives Santa the list of good kids per country who deserve a present (the naughty ones donâ€™t get anything this year).</li>
 	<li><em>Pokemon</em>: Third-party microservice returning Pokemons (this year Santa will only deliver Pokemons).</li>
</ul>
<a href="https://www.javaadvent.com/content/uploads/2020/12/javaadvent20-agoncal-figure-architecture.png"><img class="aligncenter wp-image-2763 size-large" src="https://www.javaadvent.com/content/uploads/2020/12/javaadvent20-agoncal-figure-architecture-1024x831.png" alt="" width="600" height="487" /></a>

On the 24th of December, Santa will only have a few hours to deliver Pokemons to all the good children all over the globe. That means that the <em>Santa</em> microservice will invoke the <em>Kid</em> microservice to get the location of all the good kids, per country, and then, for each kid, it invokes the <em>Pokemon</em> microservice to get a present. So the system cannot fail! We need to build a resilient architecture.

If the <em>Santa</em> microservice cannot access the two external microservices (eg. due to network problem because of weather condition), we need to find a backup plan. As a backup, if Santa cannot access the <em>Kid</em> microservice, he can create his new schedule based on the schedule of the previous year (which is stored in his local database). And if the <em>Pokemon</em> microservice does not respond, well, Santa will deliver some lollies instead (he has tons of lollies).

For that, we can use <em>MicroProfile</em> with <em>Quarkus</em>.
<h3>MicroProfile and Quarkus</h3>
<a href="https://microprofile.io"><em>Eclipse MicroProfile</em></a> addresses the need for enterprise Java microservices. It is a set of specifications for handling microservices design patterns. MicroProfile APIs establish an optimal foundation for developing microservices-based applications by adopting a subset of the Jakarta EE standards and extending them to address common microservices patterns. <em>Eclipse MicroProfile</em> is specified under the <em>Eclipse Foundation</em> and is implemented by <a href="https://github.com/smallrye"><em>SmallRye</em></a>.

If you haven't heard of <a href="https://quarkus.io/"><em>Quarkus</em></a>, you should definitely look at it. Quarkus is <em>A Kubernetes Native Java stack tailored for OpenJDK HotSpot and GraalVM, crafted from the best of breed Java libraries and standards</em>. In practice, Quarkus is an Open Source stack for writing Java applications, specifically back end applications. So Quarkus is not limited to microservices, even though it is highly suited for it. All this without reinventing the wheel by proposing a new programming model, Quarkus leverages your experience in standard libraries that you already know (e.g. CDI, JPA, Bean Validation, JAX-RS, etc.) as well as many popular frameworks (e.g. Vert.x, Apache Camel, etc.).

To build Santa a resilient system, we will use Quarkus with two MicroProfile specifications:<em>Eclipse MicroProfile REST Client</em> and <em>Eclipse MicroProfile Fault Tolerance</em>

Let's develop the <em>Santa REST Endpoint</em> with Quarkus and JAX-RS.
<h3>Santa REST Endpoint</h3>
To interact with the <em>Santa</em> microservice, we will develop a JAX-RS endpoint called <code>SantaResource</code>.

<a href="https://www.javaadvent.com/content/uploads/2020/12/javaadvent20-agoncal-figure-santa.png"><img class="aligncenter wp-image-2766 size-large" src="https://www.javaadvent.com/content/uploads/2020/12/javaadvent20-agoncal-figure-santa-1024x455.png" alt="" width="600" height="267" /></a>

As shown in the diagram above, the <code>SantaResource</code> has two methods:
<ul>
 	<li><code>createASchedule()</code>: Invoked with an HTTP POST, this method creates the schedule for one country.</li>
 	<li><code>getASchedule()</code>: Invoked with an HTTP GET, this method returns a schedule for a given country and a given year.</li>
</ul>
The <code>createASchedule()</code> method delegates the business logic and database access to a <code>SantaService</code>. This service is the one invoking the remote third-party microservices <em>Kid</em> and <em>Pokemon</em>. It also accesses the database through the <code>Schedule</code> entity. A schedule is made for a specific year (2020 in our case) and country. It has a set of <code>Delivery</code> entities: a delivery is when Santa delivers one present to one child.

[sourcecode language="java"]
@Path("/api/santa")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.TEXT_PLAIN)
public class SantaResource {

    @Inject
    SantaService service;

    @POST
    @Transactional
    public Schedule createASchedule(String country) {
        Schedule schedule = service.getAllGoodChildren(country);
        schedule = service.getEachChildAPresent(schedule);
        schedule.persist();
        return schedule;
    }

    @GET
    public Optional<Schedule> getASchedule(@QueryParam("country") String country,
                                           @DefaultValue("2020") @QueryParam("year") int year) {
        return Schedule.findByYearAndCountry(year, country);
    }
}
[/sourcecode]

The way Santa invokes this endpoint is as follow:

[sourcecode language="term"]
# Creates a new schedule for Angola
curl -X POST -H "Content-Type: text/plain" -d "Angola" http://localhost:8701/api/santa

# Gets the 2019 schedule for Venezuela
curl "http://localhost:8701/api/santa?country=Venezuela&year=2019"
[/sourcecode]

Now let's use <em>Eclipse MicroProfile REST Client</em> so the <code>SantaService</code> can access the remote microservices.
<h3>MicroProfile Rest Client</h3>
<a href="https://microprofile.io/project/eclipse/microprofile-rest-client"><em>Eclipse MicroProfile REST Client</em></a> provides a type safe approach using proxies and annotations for invoking RESTful services over HTTP. The Eclipse MicroProfile REST Client builds upon the JAX-RS APIs for consistency and ease-of-use. As shown in the diagram below, instead of invoking a remote microservice using low-level HTTP APIs, with Eclipse MicroProfile REST Client it's just a matter of using a Java interface.

<a href="https://www.javaadvent.com/content/uploads/2020/12/javaadvent20-agoncal-figure-rest-client.png"><img class="aligncenter wp-image-2769 size-large" src="https://www.javaadvent.com/content/uploads/2020/12/javaadvent20-agoncal-figure-rest-client-1024x379.png" alt="" width="600" height="222" /></a>

As seen in the <code>SantaResource</code> above, the method <code>createASchedule()</code> invokes the <code>getAllGoodChildren()</code> of the <code>SantaService</code>.<code>getAllGoodChildren()</code> uses a <code>ChildProxy</code> to communicate with the remote <em>Kid</em> microservice. For that, we use the standard CDI <code>@Inject</code> annotation in conjunction with the MicroProfile <code>@RestClient</code> annotation to inject the <code>ChildProxy</code> interface.

[sourcecode language="java"]
@ApplicationScoped
public class SantaService {

    @Inject
    @RestClient
    ChildProxy childProxy;

    public Schedule getAllGoodChildren(String country) {
        Schedule schedule = new Schedule(2020, country);
        List<Child> allChildrenPerCountry = childProxy.getAllGoodChildren(country);
        for (Child child : allChildrenPerCountry) {
            schedule.addDelivery(child);
        }
        return schedule;
    }
}
[/sourcecode]

Using the Eclipse MicroProfile REST Client is as simple as creating a <code>ChildProxy</code> interface using the proper JAX-RS and MicroProfile annotations:
<ul>
 	<li><code>@RegisterRestClient</code> allows Quarkus to know that this interface is meant to be available for CDI injection as a REST Client,</li>
 	<li><code>@Path</code> and <code>@GET</code> are the standard JAX-RS annotations used to define how to access the remote service,</li>
 	<li><code>@Produces</code> defines the expected content-type.</li>
</ul>

[sourcecode language="java"]
@Path("/api/kids")
@RegisterRestClient(configKey = "child-proxy")
public interface ChildProxy {

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    List<Child> getAllGoodChildren(@QueryParam("country") String country);
}
[/sourcecode]

The <code>ChildProxy</code> returns a list of <code>Child</code> objects. A <code>Child</code> has all the needed information for Santa to delivery a present (name, address and a boolean indicating if the house has a chimney or not).

[sourcecode language="java"]
public class Child {
    public String name;
    public String address;
    public boolean chimney;
}
[/sourcecode]

There is only one piece of information missing:
the location of the remote <em>Kid</em> microservice.
This is just a matter of configuring it in the <code>application.properties</code> file within Quarkus.
For that, we take the <code>child-proxy</code> property key (see the <code>@RegisterRestClient</code> annotation) and set a URL value (here it's <a class="bare" href="http://localhost:8702">http://localhost:8702</a>).

[sourcecode language="term"]
child-proxy/mp-rest/url=http://localhost:8702
present-proxy/mp-rest/url=http://localhost:8703
[/sourcecode]

In this configuration file, you also notice the URL of the remote <em>Pokemon</em> microservice.
Let's do the same and use Eclipse MicroProfile REST Client to invoke it through a proxy.

Once Santa gets the list of all good children, he invokes the other microservice to get a toy for each child. As seen below, the <code>SantaService</code> uses another proxy, the <code>PresentProxy</code> to invoke the remote <em>Pokemon</em> microservice.

[sourcecode language="java"]
@Inject
@RestClient
PresentProxy presentProxy;

public Schedule getEachChildAPresent(Schedule schedule) {
    for (Delivery delivery : schedule.deliveries) {
        delivery.presentName = presentProxy.getAPresent().name;
    }
    return schedule;
}
[/sourcecode]

The <code>PresentProxy</code> is an interface using a few JAX-RS and Eclipse MicroProfile REST Client annotations.

[sourcecode language="java"]
@Path("/api/pokemons/random")
@RegisterRestClient(configKey = "present-proxy")
public interface PresentProxy {

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    Present getAPresent();
}
[/sourcecode]

Everything is looking good: the <em>Santa</em> microservice can now invoke the <em>Kid</em> and <em>Pokemon</em> microservices! But Santa is very careful. He has seen other architectures before and he has seen them fail when he needed them. What if the communication breaks?
<h3>MicroProfile Fault-Tolerance</h3>
If one of the remote microservices does not respond as expected, e.g. because of fragile network communication, we have to compensate for this exceptional situation. <a href="https://microprofile.io/project/eclipse/microprofile-fault-tolerance"><em>Eclipse MicroProfile Fault Tolerance</em></a> allows us to build up our microservice architecture to be resilient and fault tolerant. This means we must not only be able to detect any issue but also to handle it automatically.

Let's provide a fallback for getting the list of all good children in case of failure. As shown in the diagram below, if the communication fails with the <em>Kid</em> microservice, we could get the schedule for the previous year. Of course, itâ€™s not 100% accurate (some children might have been naughty this year) but at least Santa can get the name and location of the children from last Christmas. As for the <em>Pokemon</em> microservice, if we canâ€™t reach it, we fall back to delivering lollies instead of a Pokemon.

<a href="https://www.javaadvent.com/content/uploads/2020/12/javaadvent20-agoncal-figure-fault-tolerance.png"><img class="aligncenter wp-image-2773 size-large" src="https://www.javaadvent.com/content/uploads/2020/12/javaadvent20-agoncal-figure-fault-tolerance-1024x607.png" alt="" width="600" height="356" /></a>

For that, we add one fallback method to the <code>SantaService</code> called <code>getLastYearSchedule()</code>. Then, we add the <em>Eclipse MicroProfile Fault Tolerance</em> <code>@Fallback</code> annotation to the <code>getAllGoodChildren()</code> method pointing to the newly created <code>getLastYearSchedule()</code> method. We also add the <code>@Retry</code> annotation to the method. We configure <code>@Retry</code> so it tries 5 times to invoke the <em>Kid</em> microservice. It waits for 2 seconds before each retry. If the communication cannot be made, then, it will fall back to <code>getLastYearSchedule()</code>. Both, the <code>getLastYearSchedule()</code> method must have the same method signature as <code>getAllGoodChildren()</code> (in our case, it takes a country and returns a <code>Schedule</code> object).

[sourcecode language="java"]
@Inject
@RestClient
ChildProxy childProxy;

@Retry(maxRetries = 5, delay = 2, delayUnit = ChronoUnit.SECONDS)
@Fallback(fallbackMethod = "getLastYearSchedule")
public Schedule getAllGoodChildren(String country) {
    Schedule schedule = new Schedule(2020, country);
    List<Child> allChildrenPerCountry = childProxy.getAllGoodChildren(country);
    for (Child child : allChildrenPerCountry) {
        schedule.addDelivery(child);
    }
    return schedule;
}

public Schedule getLastYearSchedule(String country) {
    Schedule schedule = Schedule.findByYearAndCountry(2019, country).get();
    return deepCopy(schedule);
}
[/sourcecode]

And we also use the <code>@Fallback</code> annotation on the <code>getEachChildAPresent()</code> method: if we can't reach the <em>Pokemon</em> microservice, then, we fall back to delivering lollies as a present (better then nothing).

[sourcecode language="java"]
@Inject
@RestClient
PresentProxy presentProxy;

@Fallback(fallbackMethod = "getEachChildSomeLollies")
public Schedule getEachChildAPresent(Schedule schedule) {
    for (Delivery delivery : schedule.deliveries) {
        delivery.presentName = presentProxy.getAPresent().name;
    }
    return schedule;
}

public Schedule getEachChildSomeLollies(Schedule schedule) {
    for (Delivery delivery : schedule.deliveries) {
        delivery.presentName = "Santa Lollies";
    }
    return schedule;
}
[/sourcecode]

<h3>Conclusion</h3>
Now Santa is reassured: on the night of the 24th of December, he will fly over each country and will be able to deliver Pokemons or lollies to all the children, no matter what happens.

The communication between microservices is very challenging. In a distributed architecture, you rely on an unreliable network: the network can slow down, can be cut, a microservice can hang and have a domino effect on other microservices, and so on. That's why Eclipse MicroProfile brings us a few specifications to ease microservices communication and handle communication failure.

Eclipse MicroProfile REST Client is a very elegant API where you use a type-safe approach by using a Java interface, that's all. All the underneath HTTP plumbing is taken care of. Eclipse MicroProfile REST Client will handle all the networking and marshalling, leaving our code clean of such technical details. Thanks to Eclipse MicroProfile Fault Tolerance, you can develop a fallback mechanism with only a few annotations.
<h3>References</h3>
If you want to give this code a try, <a href="https://github.com/agoncal/agoncal-articles/tree/master/2020-12-JavaAdvent">download it from GitHub</a>, build it, run it, and make sure to break the communication between the microservices to see fallback in action.

If you were naughty this year and Santa doesn't bring you a Pokemon, never mind, <a href="https://developers.redhat.com/ebooks">you can download (for free) my two books on Quarkus</a> and read for Christmas.

<a href="https://developers.redhat.com/ebooks" target="_blank" rel="https://developers.redhat.com/ebooks noopener noreferrer"><img class="aligncenter wp-image-2779 size-full" src="https://www.javaadvent.com/content/uploads/2020/12/RedHatFascicle.png" alt="" width="510" height="376" /></a>

And don't forget to check the <a href="https://microprofile.io/">MicroProfile</a> and <a href="https://quarkus.io/guides/">Quarkus</a> documentation.
